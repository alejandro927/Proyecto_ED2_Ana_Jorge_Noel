package proyecto_edd2_ana_noel_jorge;

import java.awt.HeadlessException;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.TransformerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * @authors 
 * Ana Romero
 * Jorge Zuniga
 * Noel Martinez
 */
public class Main extends javax.swing.JFrame {

    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pantalla_Crear_Campos = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        tf_NombreCampo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tipoEntero = new javax.swing.JRadioButton();
        tipoDecimal = new javax.swing.JRadioButton();
        tipoString = new javax.swing.JRadioButton();
        tipoChar = new javax.swing.JRadioButton();
        CrearCampo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rb_LlavePrincipal = new javax.swing.JRadioButton();
        rb_LlaveSecundaria = new javax.swing.JRadioButton();
        js_tamanioCadena = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        rb_campoNormal = new javax.swing.JRadioButton();
        labelFondo = new javax.swing.JLabel();
        lista_de_campos = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jLabel_Title_Campos = new javax.swing.JLabel();
        jButton_agregar = new javax.swing.JButton();
        jButton_modificar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jButton_hacerPrincipal = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_campos = new javax.swing.JList<>();
        jLabel_BG_campos = new javax.swing.JLabel();
        GrupoTipoDeDato = new javax.swing.ButtonGroup();
        LlavePrincipal_Secundaria = new javax.swing.ButtonGroup();
        ModificarCampo = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jtf_actualCampo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jtf_nuevoCampo = new javax.swing.JTextField();
        jb_modificarCampoAceptar = new javax.swing.JButton();
        jl_mod_BG1 = new javax.swing.JLabel();
        jb_inicio = new javax.swing.JButton();
        jb_anterior = new javax.swing.JButton();
        jb_siguiente = new javax.swing.JButton();
        jb_final = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Salida = new javax.swing.JButton();
        jLabel_nombreArchivo = new javax.swing.JLabel();
        jLabelLlavePrincipal = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Display = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jpb_porcentaje = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        FONDO = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Archivos = new javax.swing.JMenu();
        NuevoFile = new javax.swing.JMenuItem();
        AbrirFile = new javax.swing.JMenuItem();
        GuardarFile = new javax.swing.JMenuItem();
        CerrarFile = new javax.swing.JMenuItem();
        Campos = new javax.swing.JMenu();
        jMenuItem_listarCampos = new javax.swing.JMenuItem();
        Registros = new javax.swing.JMenu();

        pantalla_Crear_Campos.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Nombre del Campo:");
        pantalla_Crear_Campos.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 60, 132, -1));
        pantalla_Crear_Campos.getContentPane().add(tf_NombreCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 56, 162, -1));

        jLabel2.setText("Tipo De Dato del Campo:");
        pantalla_Crear_Campos.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 165, -1, -1));

        tipoEntero.setBackground(new java.awt.Color(142, 63, 65));
        GrupoTipoDeDato.add(tipoEntero);
        tipoEntero.setText("Entero");
        pantalla_Crear_Campos.getContentPane().add(tipoEntero, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 109, 110, -1));

        GrupoTipoDeDato.add(tipoDecimal);
        tipoDecimal.setText("Decimal");
        pantalla_Crear_Campos.getContentPane().add(tipoDecimal, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 143, 110, -1));

        GrupoTipoDeDato.add(tipoString);
        tipoString.setSelected(true);
        tipoString.setText("Cadena de Texto");
        tipoString.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tipoStringStateChanged(evt);
            }
        });
        pantalla_Crear_Campos.getContentPane().add(tipoString, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, -1, -1));

        GrupoTipoDeDato.add(tipoChar);
        tipoChar.setText("Caracter");
        pantalla_Crear_Campos.getContentPane().add(tipoChar, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 211, 110, -1));

        CrearCampo.setText("Aceptar");
        CrearCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CrearCampoMouseClicked(evt);
            }
        });
        pantalla_Crear_Campos.getContentPane().add(CrearCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 102, -1));

        jLabel3.setText("Tipo de Llave");
        pantalla_Crear_Campos.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 100, -1));

        LlavePrincipal_Secundaria.add(rb_LlavePrincipal);
        rb_LlavePrincipal.setText("Principal");
        pantalla_Crear_Campos.getContentPane().add(rb_LlavePrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 260, -1, -1));

        LlavePrincipal_Secundaria.add(rb_LlaveSecundaria);
        rb_LlaveSecundaria.setText("Secundaria");
        pantalla_Crear_Campos.getContentPane().add(rb_LlaveSecundaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 300, -1, -1));

        js_tamanioCadena.setModel(new javax.swing.SpinnerNumberModel(15, 2, 255, 1));
        pantalla_Crear_Campos.getContentPane().add(js_tamanioCadena, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 180, 70, -1));

        jLabel4.setText("Tama√±o Cadena");
        pantalla_Crear_Campos.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 160, -1, -1));

        LlavePrincipal_Secundaria.add(rb_campoNormal);
        rb_campoNormal.setSelected(true);
        rb_campoNormal.setText("Campo Ordinario");
        pantalla_Crear_Campos.getContentPane().add(rb_campoNormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 340, -1, -1));

        labelFondo.setPreferredSize(new java.awt.Dimension(1587, 545));
        pantalla_Crear_Campos.getContentPane().add(labelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, 450));

        lista_de_campos.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_Title_Campos.setFont(new java.awt.Font("BankGothic Lt BT", 3, 36)); // NOI18N
        jLabel_Title_Campos.setForeground(new java.awt.Color(65, 67, 106));
        jLabel_Title_Campos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Title_Campos.setText("Campos");
        jLabel_Title_Campos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 67, 106), 3));
        jPanel4.add(jLabel_Title_Campos, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 210, -1));

        jButton_agregar.setBackground(new java.awt.Color(65, 67, 106));
        jButton_agregar.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_agregar.setForeground(new java.awt.Color(255, 204, 0));
        jButton_agregar.setText("Agregar");
        jButton_agregar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_agregar.setBorderPainted(false);
        jButton_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_agregarActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 100, -1));

        jButton_modificar.setBackground(new java.awt.Color(65, 67, 106));
        jButton_modificar.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_modificar.setForeground(new java.awt.Color(255, 204, 0));
        jButton_modificar.setText("Modificar");
        jButton_modificar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_modificar.setBorderPainted(false);
        jButton_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_modificarActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 100, -1));

        jButton_eliminar.setBackground(new java.awt.Color(65, 67, 106));
        jButton_eliminar.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_eliminar.setForeground(new java.awt.Color(255, 204, 0));
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_eliminar.setBorderPainted(false);
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 100, -1));

        jButton_hacerPrincipal.setBackground(new java.awt.Color(65, 67, 106));
        jButton_hacerPrincipal.setFont(new java.awt.Font("BankGothic Md BT", 1, 14)); // NOI18N
        jButton_hacerPrincipal.setForeground(new java.awt.Color(255, 204, 0));
        jButton_hacerPrincipal.setText("Hacer llave principal");
        jButton_hacerPrincipal.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.yellow, null, null));
        jButton_hacerPrincipal.setBorderPainted(false);
        jButton_hacerPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hacerPrincipalActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_hacerPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 220, -1));

        jList_campos.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(jList_campos);

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 197, 234));
        jPanel4.add(jLabel_BG_campos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 390));

        lista_de_campos.getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 390));

        ModificarCampo.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setFont(new java.awt.Font("BankGothic Lt BT", 0, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Modificar Campo");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 190, 40));

        jtf_actualCampo.setEditable(false);
        jPanel2.add(jtf_actualCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 170, 30));

        jLabel12.setText("Nombre Actual: ");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        jLabel13.setText("Nuevo Nombre:");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, -1, -1));
        jPanel2.add(jtf_nuevoCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 170, 30));

        jb_modificarCampoAceptar.setText("Aceptar");
        jb_modificarCampoAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_modificarCampoAceptarActionPerformed(evt);
            }
        });
        jPanel2.add(jb_modificarCampoAceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 130, -1));
        jPanel2.add(jl_mod_BG1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        ModificarCampo.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon("./src/IMAGES/x.png").getImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jb_inicio.setText("Inicio");
        jb_inicio.setEnabled(false);
        jb_inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_inicioActionPerformed(evt);
            }
        });
        getContentPane().add(jb_inicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 380, -1, -1));

        jb_anterior.setText("Anterior");
        jb_anterior.setEnabled(false);
        jb_anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_anteriorActionPerformed(evt);
            }
        });
        getContentPane().add(jb_anterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 380, -1, -1));

        jb_siguiente.setText("Siguiente");
        jb_siguiente.setEnabled(false);
        jb_siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_siguienteActionPerformed(evt);
            }
        });
        getContentPane().add(jb_siguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 380, -1, -1));

        jb_final.setText("Final");
        jb_final.setEnabled(false);
        jb_final.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_finalActionPerformed(evt);
            }
        });
        getContentPane().add(jb_final, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 380, -1, -1));

        jButton1.setText("Vaciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 380, -1, -1));

        Salida.setText("Salida");
        Salida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalidaActionPerformed(evt);
            }
        });
        getContentPane().add(Salida, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 380, 73, -1));

        jLabel_nombreArchivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_nombreArchivo.setText("Archivo Actual:");
        getContentPane().add(jLabel_nombreArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 270, 16));

        jLabelLlavePrincipal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelLlavePrincipal.setText("Llave Primaria:");
        getContentPane().add(jLabelLlavePrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 270, -1));

        jTable_Display.setModel(new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        jTable_Display.setGridColor(new java.awt.Color(153, 0, 204));
        jTable_Display.setRowSelectionAllowed(false);
        jScrollPane3.setViewportView(jTable_Display);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 609, 266));

        jPanel1.setBackground(new java.awt.Color(156, 111, 73));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 410));
        getContentPane().add(jpb_porcentaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 450, -1));

        jLabel5.setFont(new java.awt.Font("Dialog", 3, 20)); // NOI18N
        jLabel5.setText("EL ARCHIVERO");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, 160, 50));

        FONDO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Principal Page.jpg"))); // NOI18N
        getContentPane().add(FONDO, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, -10, 720, 420));

        Archivos.setText("Archivos");

        NuevoFile.setText("Nuevo Archivo");
        NuevoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoFileActionPerformed(evt);
            }
        });
        Archivos.add(NuevoFile);

        AbrirFile.setText("Abrir Archivo");
        AbrirFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirFileActionPerformed(evt);
            }
        });
        Archivos.add(AbrirFile);

        GuardarFile.setText("Guardar Archivo");
        GuardarFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarFileActionPerformed(evt);
            }
        });
        Archivos.add(GuardarFile);

        CerrarFile.setText("Cerrar Archivo");
        CerrarFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarFileActionPerformed(evt);
            }
        });
        Archivos.add(CerrarFile);

        jMenuBar1.add(Archivos);

        Campos.setText("Campos");

        jMenuItem_listarCampos.setText("Menu de campos");
        jMenuItem_listarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_listarCamposActionPerformed(evt);
            }
        });
        Campos.add(jMenuItem_listarCampos);

        jMenuBar1.add(Campos);

        Registros.setText("En construccion...");
        jMenuBar1.add(Registros);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NuevoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoFileActionPerformed
        // TODO add your handling code here:
        if (archivoCargado != null) {
            CerrarFileActionPerformed(evt); // Al correr el programa y abrir el primer archivo hace una corrida de esta linea, la cual no deberia pasar
            // porque por default no hay archivo cargado
        }
        JFileChooser jfc = new JFileChooser("./Files");//instanciar
        nuevo = true;
        // y agregar una extension que filtre
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo de registro ANJ", "ANJ");
        jfc.setFileFilter(filtro);
        int seleccion = jfc.showSaveDialog(this); // muestre la ventana
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File fichero = null;

            path = jfc.getSelectedFile().getPath();

            if (!path.endsWith(".ANJ")) {
                FileOutputStream fs = null;
                try {
                    //si el filtro es archivo de texto
                    fichero = new File(path + ".ANJ");//agarre el archivo y concatene la extension
                    String indexFileName = path;
                    File archivoIndicesAux = new File(indexFileName + ".index");
                    fs = new FileOutputStream(archivoIndicesAux);
                    ObjectOutputStream os = new ObjectOutputStream(fs);
                    BTree<Campo, Integer> indices = new BTree<>(3);
                    os.writeObject(indices);
                    os.flush();
                    os.close();
                    archivoIndices = archivoIndicesAux;
                } catch (FileNotFoundException ex) {
                } catch (IOException ex) {
                } finally {
                    try {
                        fs.close();
                    } catch (IOException ex) {
                    }
                }
            } else {

                JOptionPane.showMessageDialog(this, "El archivo ya existe.", "Error.",
                        JOptionPane.ERROR_MESSAGE);
                nuevo = false;
                return;
            }
            InsertMetadataInNewFile(fichero);
            JOptionPane.showMessageDialog(this, "Archivo creado exitosamente.");
            archivoCargado = fichero;
            archivoEnUso = new ArchivoDeRegistro(archivoCargado, archivoIndices);
            jLabel_nombreArchivo.setText("Nombre Archivo: " + archivoCargado.getName());
            jTable_Display.setModel(new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            });
            saved = true;
            nuevo = false;
            jButton_agregar.setEnabled(true);
            jButton_modificar.setEnabled(true);
            jButton_eliminar.setEnabled(true);
            jButton_hacerPrincipal.setEnabled(true);
        }
    }//GEN-LAST:event_NuevoFileActionPerformed

    private void CerrarFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarFileActionPerformed
        // TODO add your handling code here:
        if (!saved) {
            int save = JOptionPane.showConfirmDialog(this, "¬øDesea guardar el "
                    + "archivo antes de cerrar?", "Guardar y cerrar.",
                    JOptionPane.YES_NO_OPTION);
            if (save == JOptionPane.YES_OPTION) {
                GuardarFileActionPerformed(evt);
            }
            saved = true;
        }
        jLabel_nombreArchivo.setText("Current File:");
        archivoCargado = null;

        clearDisplay(true);

        jLabelLlavePrincipal.setText("Llave principal: ");

        jb_inicio.setEnabled(false);
        jb_final.setEnabled(false);
        jb_anterior.setEnabled(false);
        jb_siguiente.setEnabled(false);
    }//GEN-LAST:event_CerrarFileActionPerformed

    private void GuardarFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarFileActionPerformed
        // TODO add your handling code here:
        if (!verifyOpen()) {
            return;
        }

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "rw")) {

            if (saved) {
                return;
            }

            InsertMetadataInNewFile(archivoCargado);
            JOptionPane.showMessageDialog(this, "El archivo se ha guardado "
                    + "correctamente", "EXITO", JOptionPane.INFORMATION_MESSAGE);
            saved = true;
        } catch (IOException ex) {
        }       
    }//GEN-LAST:event_GuardarFileActionPerformed

    private void AbrirFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirFileActionPerformed
        // TODO add your handling code here:
        try {
            if (archivoCargado != null) {
                CerrarFileActionPerformed(evt); //Al correr el programa y abrir el primer archivo hace una corrida de esta linea, la cual no deberia pasar
                // porque por default no hay archivo cargado
            }
            nuevo = false;
            JFileChooser jfc = new JFileChooser("./Files"); //donde deseamos que aparezca
            //crear los filtros
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Registro X", "ANJ");
            //setear los filtros
            jfc.setFileFilter(filtro);//forma 1: marcado como seleccionado
            int seleccion = jfc.showOpenDialog(this);
            if (seleccion == JFileChooser.APPROVE_OPTION && jfc.getSelectedFile().isFile()) {
                File archiAuxNoSeCual = jfc.getSelectedFile();
                String pathParaCargar = archiAuxNoSeCual.getPath();
                if (pathParaCargar.endsWith(".ANJ")) {
                    pathParaCargar = pathParaCargar.substring(0, pathParaCargar.length() - 6);
                    pathParaCargar += ".index";
                }

                File archivoIndicesACargar = new File(pathParaCargar);
                loadFile(archiAuxNoSeCual, archivoIndicesACargar);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_AbrirFileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearDisplay(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jb_finalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_finalActionPerformed
        int target = archivoEnUso.getNoRegistros() - (archivoEnUso.getNoRegistros() % 20);

        try (RandomAccessFile raf = new RandomAccessFile(archivoCargado, "rw")) {

            int largo = archivoEnUso.longitudRegistro();
            raf.seek(currentPosList);

            while (currentRegList < target) {
                if (raf.readChar() != '*') {
                    currentRegList++;
                }
                currentPosList += largo;
                raf.seek(currentPosList);
            }

            jb_siguiente.setEnabled(false);
            jb_final.setEnabled(false);

            jb_anterior.setEnabled(true);
            jb_inicio.setEnabled(true);

            listAfter();

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jb_finalActionPerformed

    private void jb_siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_siguienteActionPerformed
        if (archivoEnUso.getNoRegistros() - 20 <= currentRegList) {
            jb_siguiente.setEnabled(false);
            jb_final.setEnabled(false);
        }

        jb_anterior.setEnabled(true);
        jb_inicio.setEnabled(true);

        listAfter();
    }//GEN-LAST:event_jb_siguienteActionPerformed

    private void jb_anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_anteriorActionPerformed

        if (currentRegList <= 40) {
            jb_anterior.setEnabled(false);
            jb_inicio.setEnabled(false);
        }

        jb_siguiente.setEnabled(true);
        jb_final.setEnabled(true);

        int target = currentRegList - (((currentRegList - 1) % 20) + 1) - 20;

        try (RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

            int largo = archivoEnUso.longitudRegistro();

            while (currentRegList > target) {

                currentPosList -= largo;
                raf.seek(currentPosList);

                if (raf.readChar() != '*') {
                    currentRegList--;
                }
            }

            listAfter();

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jb_anteriorActionPerformed

    private void jb_inicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_inicioActionPerformed

        jb_siguiente.setEnabled(true);
        jb_final.setEnabled(true);

        jb_anterior.setEnabled(false);
        jb_inicio.setEnabled(false);

        currentPosList = archivoEnUso.tamanioMetadata();
        currentRegList = 0;

        listAfter();
    }//GEN-LAST:event_jb_inicioActionPerformed

    private void SalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalidaActionPerformed
        // TODO add your handling code here:
        if (!saved) {
            int save = JOptionPane.showConfirmDialog(this, "¬øDesea guardar el "
                + "archivo antes de salir?", "Guardar y cerrar.", JOptionPane.YES_NO_OPTION);
            if (save == JOptionPane.YES_OPTION) {
                GuardarFileActionPerformed(evt);
            }
        }
        JOptionPane.showMessageDialog(this, "Gracias por usar el programa que tenga buen dia!");
        System.exit(0);
    }//GEN-LAST:event_SalidaActionPerformed

    private void jMenuItem_listarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_listarCamposActionPerformed
        if (!verifyOpen()) {
            return;
        }
        lista_de_campos.pack();
        lista_de_campos.setLocationRelativeTo(this);
        lista_de_campos.setModal(true);
        lista_de_campos.setVisible(true);
    }//GEN-LAST:event_jMenuItem_listarCamposActionPerformed

    private void tipoStringStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tipoStringStateChanged
        if (tipoString.isSelected()) {
            js_tamanioCadena.setEnabled(true);
        } else {
            js_tamanioCadena.setEnabled(false);
        }
    }//GEN-LAST:event_tipoStringStateChanged

    private void CrearCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearCampoMouseClicked
        String nombreCampo = tf_NombreCampo.getText();
        nombreCampo = nombreCampo.strip().toUpperCase();

        boolean repetido = false;
        if (nombreCampo == null || nombreCampo.equals("")) {
            return;
        }
        if (nombreCampo.length() > 25) {
            JOptionPane.showMessageDialog(pantalla_Crear_Campos, "El campo no puede tener un nombre mayor a 25",
                "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String nombreSinEspacios = nombreCampo;

        for (int i = nombreCampo.length(); i < 25; i++) {
            nombreCampo += " ";
        }
        String auxValidacion;
        for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
            auxValidacion = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
            if (auxValidacion.equalsIgnoreCase(nombreCampo)) { //Checks repetition
                repetido = true;
                break;
            }
        }
        if (repetido) {
            JOptionPane.showMessageDialog(pantalla_Crear_Campos, "El campo ya existe. Intente con otro nombre",
                "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();
            m.addColumn(nombreSinEspacios);
            jTable_Display.setModel(m);

            if (tipoEntero.isSelected()) {
                CampoEntero campo = new CampoEntero(nombreCampo + "_int");
                archivoEnUso.getCamposDelArchivo().add(campo);
            } else if (tipoDecimal.isSelected()) {
                CampoDecimal campo = new CampoDecimal(nombreCampo + "_dec");
                archivoEnUso.getCamposDelArchivo().add(campo);
            } else if (tipoChar.isSelected()) {
                CampoCaracter campo = new CampoCaracter(nombreCampo + "_car");
                archivoEnUso.getCamposDelArchivo().add(campo);
            } else if (tipoString.isSelected()) {
                CampoTexto campo = new CampoTexto(nombreCampo + "_str");
                campo.setLongitud((Integer) js_tamanioCadena.getValue());
                js_tamanioCadena.setValue(15);
                archivoEnUso.getCamposDelArchivo().add(campo);
            }
            if (archivoEnUso.getLlavePrincipal() != -1) {
                tieneLlavePrincipal = true;
            }
            if (rb_LlavePrincipal.isSelected()) {

                if (!tieneLlavePrincipal) {
                    jLabelLlavePrincipal.setText("Llave principal: " + nombreSinEspacios);
                    archivoEnUso.setLlavePrincipal(archivoEnUso.getCamposDelArchivo().size() - 1);
                    tieneLlavePrincipal = true;
                } else {
                    int seleccion = JOptionPane.showConfirmDialog(pantalla_Crear_Campos, "¬øDesea cambiar la llave principal a este campo?",
                        "Cambiar llave principal", JOptionPane.INFORMATION_MESSAGE);
                    if (seleccion == JOptionPane.YES_OPTION) {
                        jLabelLlavePrincipal.setText("Llave principal: " + nombreSinEspacios);
                        archivoEnUso.setLlavePrincipal(archivoEnUso.getCamposDelArchivo().size() - 1);
                    }
                }

            } else if (rb_LlaveSecundaria.isSelected()) {
                archivoEnUso.getSecundarias().add(archivoEnUso.getCamposDelArchivo().size() - 1);
            }
            JOptionPane.showMessageDialog(pantalla_Crear_Campos, "Campo agregado exitosamente.");
            DefaultListModel mod = (DefaultListModel) jList_campos.getModel();
            mod.addElement(nombreSinEspacios);
            jList_campos.setModel(mod);

            saved = false;
            tf_NombreCampo.setText("");
            tipoString.setSelected(true);
            rb_campoNormal.setSelected(true);
        }
    }//GEN-LAST:event_CrearCampoMouseClicked

    private void jButton_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_agregarActionPerformed
        pantalla_Crear_Campos.pack();
        pantalla_Crear_Campos.setLocationRelativeTo(lista_de_campos);
        pantalla_Crear_Campos.setModal(true);
        pantalla_Crear_Campos.setVisible(true);
        rb_campoNormal.setSelected(true);
    }//GEN-LAST:event_jButton_agregarActionPerformed

    private void jButton_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_modificarActionPerformed
        try {
            int selection = jList_campos.getSelectedIndex();

            // No hay nada seleccionado
            if (selection == -1) {
                JOptionPane.showMessageDialog(lista_de_campos, "Debe seleccionar un campo.");
                return;
            }

            DefaultListModel mod = (DefaultListModel) jList_campos.getModel();

            jtf_actualCampo.setText((String) mod.getElementAt(selection));
            jtf_nuevoCampo.setText("");

            ModificarCampo.pack();
            ModificarCampo.setLocationRelativeTo(this);
            ModificarCampo.setModal(true);
            ModificarCampo.setVisible(true);

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton_modificarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        int selection = jList_campos.getSelectedIndex();
        // No hay nada seleccionado
        if (selection == -1) {
            JOptionPane.showMessageDialog(lista_de_campos, "Debe seleccionar un campo.");
            return;
        }

        DefaultListModel mod = (DefaultListModel) jList_campos.getModel();

        if (selection == archivoEnUso.getLlavePrincipal()) {
            JOptionPane.showMessageDialog(lista_de_campos, "El campo seleccionado "
                + "es llave principal, no puede ser eliminado. Asigne otro campo como "
                + "llave primaria antes de eliminar", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int remove = JOptionPane.showConfirmDialog(lista_de_campos, "¬øDesea eliminar el "
            + "campo " + ((String) mod.get(selection)).strip() + "?", "Eliminar campo.",
            JOptionPane.YES_NO_OPTION);

        if (remove != JOptionPane.YES_OPTION) {
            return;
        }

        mod.remove(selection);

        archivoEnUso.getCamposDelArchivo().remove(selection);

        if (archivoEnUso.getLlavePrincipal() > selection) {
            archivoEnUso.setLlavePrincipal(archivoEnUso.getLlavePrincipal() - 1);
        }

        archivoEnUso.updateSecondaryKeys(selection);

        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
        String dataAux[] = new String[archivoEnUso.getCamposDelArchivo().size()];
        for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
            dataAux[i] = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo().substring(0, 25);
        }
        model.setColumnIdentifiers(dataAux);
        JOptionPane.showMessageDialog(lista_de_campos, "Campo eliminado con √©xito.",
            "REALIZADO", JOptionPane.INFORMATION_MESSAGE);

        saved = false;
    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void jButton_hacerPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hacerPrincipalActionPerformed
        int selection = jList_campos.getSelectedIndex();

        // No hay nada seleccionado
        if (selection == -1) {
            JOptionPane.showMessageDialog(lista_de_campos, "Debe seleccionar un campo.");
            return;
        }

        archivoEnUso.setLlavePrincipal(selection);
        jLabelLlavePrincipal.setText("Llave principal: " + jList_campos.getModel().getElementAt(selection));

        saved = false;
    }//GEN-LAST:event_jButton_hacerPrincipalActionPerformed

    private void jb_modificarCampoAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_modificarCampoAceptarActionPerformed
        try {

            int seleccion = jList_campos.getSelectedIndex();

            DefaultListModel mod = (DefaultListModel) jList_campos.getModel();

            String viejo = jtf_actualCampo.getText();
            String nuevoNombre = jtf_nuevoCampo.getText();

            if (nuevoNombre == null || nuevoNombre.equals(viejo)) {
                return;
            }

            nuevoNombre = nuevoNombre.strip();

            if (nuevoNombre.equals("")) {
                return;
            } else if (nuevoNombre.length() > 25) {
                JOptionPane.showMessageDialog(ModificarCampo, "El nuevo nombre del campo no debe "
                    + "sobrepasar los 25 caracteres.", "Nombre demasiado largo.", JOptionPane.ERROR_MESSAGE);
                return;
            }

            nuevoNombre = nuevoNombre.toUpperCase();

            int largo = nuevoNombre.length();
            while (nuevoNombre.length() < 25) {
                nuevoNombre += " ";
            }

            for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
                if (nuevoNombre.equalsIgnoreCase(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo().substring(0, 25))) {
                    JOptionPane.showMessageDialog(lista_de_campos, "El campo ingresado ya existe.", "No se"
                        + " puede modificar el campo", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            //Cambiamos el campo en la JList
            mod.setElementAt(nuevoNombre, seleccion);
            jList_campos.setModel(mod);

            //Obtenemos el campo del ArchivoDeRegistro
            Campo campo = archivoEnUso.getCamposDelArchivo().get(seleccion);
            String nombreViejo = campo.getNombreCampo();

            if (nombreViejo.endsWith("int")) {
                nuevoNombre += "_int";
            } else if (nombreViejo.endsWith("dec")) {
                nuevoNombre += "_dec";
            } else if (nombreViejo.endsWith("car")) {
                nuevoNombre += "_car";
            } else {
                nuevoNombre += "_str";
            }

            //Cambiamos el campo en el ArchivoDeRegistro
            campo.setNombreCampo(nuevoNombre);

            JOptionPane.showMessageDialog(lista_de_campos, "Campo modificado con exito",
                "REALIZADO", JOptionPane.INFORMATION_MESSAGE);

            // Modificamos el campo en la tabla.
            DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
            String dataAux[] = new String[archivoEnUso.getCamposDelArchivo().size()];
            for (int i = 0; i < dataAux.length; i++) {
                if (i == seleccion) {
                    dataAux[i] = nuevoNombre.substring(0, largo);
                } else {
                    dataAux[i] = model.getColumnName(i);
                }
            }
            saved = false;

            ModificarCampo.setVisible(false);

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jb_modificarCampoAceptarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirFile;
    private javax.swing.JMenu Archivos;
    private javax.swing.JMenu Campos;
    private javax.swing.JMenuItem CerrarFile;
    private javax.swing.JButton CrearCampo;
    private javax.swing.JLabel FONDO;
    private javax.swing.ButtonGroup GrupoTipoDeDato;
    private javax.swing.JMenuItem GuardarFile;
    private javax.swing.ButtonGroup LlavePrincipal_Secundaria;
    private javax.swing.JDialog ModificarCampo;
    private javax.swing.JMenuItem NuevoFile;
    private javax.swing.JMenu Registros;
    private javax.swing.JButton Salida;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_agregar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JButton jButton_hacerPrincipal;
    private javax.swing.JButton jButton_modificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelLlavePrincipal;
    private javax.swing.JLabel jLabel_BG_campos;
    private javax.swing.JLabel jLabel_Title_Campos;
    private javax.swing.JLabel jLabel_nombreArchivo;
    private javax.swing.JList<String> jList_campos;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_listarCampos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_Display;
    private javax.swing.JButton jb_anterior;
    private javax.swing.JButton jb_final;
    private javax.swing.JButton jb_inicio;
    private javax.swing.JButton jb_modificarCampoAceptar;
    private javax.swing.JButton jb_siguiente;
    private javax.swing.JLabel jl_mod_BG1;
    private javax.swing.JProgressBar jpb_porcentaje;
    private javax.swing.JSpinner js_tamanioCadena;
    private javax.swing.JTextField jtf_actualCampo;
    private javax.swing.JTextField jtf_nuevoCampo;
    private javax.swing.JLabel labelFondo;
    private javax.swing.JDialog lista_de_campos;
    private javax.swing.JDialog pantalla_Crear_Campos;
    private javax.swing.JRadioButton rb_LlavePrincipal;
    private javax.swing.JRadioButton rb_LlaveSecundaria;
    private javax.swing.JRadioButton rb_campoNormal;
    private javax.swing.JTextField tf_NombreCampo;
    private javax.swing.JRadioButton tipoChar;
    private javax.swing.JRadioButton tipoDecimal;
    private javax.swing.JRadioButton tipoEntero;
    private javax.swing.JRadioButton tipoString;
    // End of variables declaration//GEN-END:variables

    private boolean verifyOpen() {
        if (archivoCargado == null) {
            JOptionPane.showMessageDialog(this, "Debe abrir un archivo para "
                    + "realizar esa operaci√≥n.", "No hay un archivo abierto",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    public void InsertMetadataInNewFile(File archivo) {
        try {
            new FileWriter(archivo, false).close();
        } catch (IOException ex) {
        }

        try (RandomAccessFile raf = new RandomAccessFile(archivo, "rw")) {

            raf.writeInt(-1);//no es RRN, es cabeza del availist 
            raf.writeInt(0);//#registros    
            Date date = Calendar.getInstance().getTime();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
            String strDateCreated = dateFormat.format(date);
            raf.writeUTF(strDateCreated);//fecha de creacion
            if (nuevo) {
                raf.writeInt(-1);//llave principal -1 por defecto solo para archivos nuevos
                raf.writeInt(0);//archivos nuevos no tienen llaves secundarias
                raf.writeInt(0);//archivos nuevos no tiene campos
            } else {
                raf.writeInt(archivoEnUso.getLlavePrincipal());
                int cantidadLlavesSecundarias = archivoEnUso.getSecundarias().size();
                raf.writeInt(cantidadLlavesSecundarias);
                for (int i = 0; i < archivoEnUso.getSecundarias().size(); i++) {
                    raf.writeInt(archivoEnUso.getSecundarias().get(i));
                }
                int cantidadCampos = archivoEnUso.getCamposDelArchivo().size();
                raf.writeInt(cantidadCampos);
                for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
                    String auxiliarNoSeCuantas = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                    raf.writeUTF(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo());
                    if (auxiliarNoSeCuantas.endsWith("_str")) {
                        raf.writeInt(((CampoTexto) archivoEnUso.getCamposDelArchivo().get(i)).getLongitud());
                    }
                }
                raf.writeChar('\n');
            }
        } catch (IOException e) {
        }
    }

    private void loadFile(File file, File fileIndices) {
        if (file == null) {
            return;
        }
        archivoCargado = file;
        archivoIndices = fileIndices;
        archivoEnUso = new ArchivoDeRegistro(archivoCargado, archivoIndices);
        jLabel_nombreArchivo.setText("Archivo Actual: " + archivoCargado.getName());
        jTable_Display.setModel(new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        jList_campos.setModel(new DefaultListModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        DefaultListModel list_model = new DefaultListModel();
        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();
        DefaultListModel list_model2 = new DefaultListModel();
        DefaultListModel model2 = (DefaultListModel) jList_campos.getModel();

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {
//            String[] dataColumn = new String[archivoEnUso.getCamposDelArchivo().size()];
            for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {//Para cargar los registros en memoria una vez se abre el archivo
                String aux = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                aux = aux.substring(0, 25).strip();

                list_model.addElement(aux);
                //list_model2.addElement(aux);
                model2.addElement(aux);

                String valoresColumna[] = new String[20];
                model.addColumn(aux, valoresColumna);
            }

            if (archivoEnUso.getLlavePrincipal() == -1) {
                jLabelLlavePrincipal.setText("Llave Principal: No se ha seleccionado una llave principal");
            } else {
                String llavePrincipal = archivoEnUso.getCamposDelArchivo().get(archivoEnUso.getLlavePrincipal()).getNombreCampo().substring(0, 25).strip();
                jLabelLlavePrincipal.setText("Llave Principal: " + llavePrincipal);
            }

            if (archivoEnUso.getLlavePrincipal() != -1) {
                tieneLlavePrincipal = true;
            }

            if (archivoEnUso.getNoRegistros() == 0) {
                jButton_agregar.setEnabled(true);
                jButton_modificar.setEnabled(true);
                jButton_eliminar.setEnabled(true);
                jButton_hacerPrincipal.setEnabled(true);
            } else {
                jButton_agregar.setEnabled(false);
                jButton_modificar.setEnabled(false);
                jButton_eliminar.setEnabled(false);
                jButton_hacerPrincipal.setEnabled(false);
            }

        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }

    public void clearDisplay(boolean newTableModel) {
        //Reset progressbar
        jpb_porcentaje.setValue(0);

        //Reset table
        if (newTableModel) {
            jTable_Display.setModel(new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            });
        } else {
            String[][] data = new String[20][archivoEnUso.getCamposDelArchivo().size()];
            DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();

            String[] columns = new String[data[0].length];
            for (int i = 0; i < columns.length; i++) {
                columns[i] = m.getColumnName(i);
            }

            m.setDataVector(data, columns);
        }

        //Reset navigation buttons
        jb_siguiente.setEnabled(false);
        jb_final.setEnabled(false);

        jb_anterior.setEnabled(false);
        jb_inicio.setEnabled(false);

        //Reset helper variables
        currentPosList = -1;
        currentRegList = -1;

    }

    private void listAfter() {
        DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();
        String[][] data = new String[20][archivoEnUso.getCamposDelArchivo().size()];
        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {
            byte[] types = new byte[data[0].length];
            for (int i = 0; i < types.length; i++) {
                String nom = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                if (nom.endsWith("int")) {
                    types[i] = 1;
                } else if (nom.endsWith("dec")) {
                    types[i] = 2;
                } else if (nom.endsWith("car")) {
                    types[i] = 3;
                } else {
                    types[i] = 4;
                }
            }
            int largo = archivoEnUso.longitudRegistro();
            raf.seek(currentPosList);
            int row = 0;
            for (; currentRegList < archivoEnUso.getNoRegistros() && row < 20; currentRegList++) {
                char mark = raf.readChar();
                if (mark == '*') {
                    currentRegList--;
                    currentPosList += largo;
                    raf.seek(currentPosList);
                    continue;
                }
                for (int j = 0; j < data[0].length; j++) {
                    switch (types[j]) {
                        case 1: {
                            String val = String.valueOf(raf.readInt());
                            data[row][j] = val;
                            break;
                        }
                        case 2: {
                            String val = String.valueOf(raf.readDouble());
                            data[row][j] = val;
                            break;
                        }
                        case 3: {
                            String val = String.valueOf(raf.readChar());
                            data[row][j] = val;
                            break;
                        }
                        case 4: {
                            String val = raf.readUTF();
                            data[row][j] = val;
                            break;
                        }
                    }
                }
                currentPosList += largo;
                row++;
                raf.readChar();
            }

        } catch (EOFException eof) {
        } catch (Exception e) {
            return;
        }

        String[] columns = new String[data[0].length];
        for (int i = 0; i < columns.length; i++) {
            columns[i] = m.getColumnName(i);
        }

        m.setDataVector(data, columns);
        jpb_porcentaje.setValue(currentRegList);
    }

    private File archivoCargado;
    private File archivoIndices;
    private boolean saved = true; //Debe incicializarse en true porque por default no hay un archivo abierto. Al crear un archivo se hace false.
    private boolean tieneLlavePrincipal = false;
    private ArchivoDeRegistro archivoEnUso;
    private boolean nuevo = false;
    private DocumentBuilderFactory docFactory = null;
    private DocumentBuilder docBuilder = null;
    private Document doc = null;
    private Element rootElement = null;
    private TransformerFactory transformerFactory = null;
    private Registro registroCargado;
    private int RRNCargado = -1;
    private String path = "";
    private int currentPosList = -1;
    private int currentRegList = -1;
    private ArchivoDeRegistro cruce1;
    private ArchivoDeRegistro cruce2;
    private boolean reindexar;
}
