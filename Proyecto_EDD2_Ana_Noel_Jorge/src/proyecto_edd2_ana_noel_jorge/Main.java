package proyecto_edd2_ana_noel_jorge;

import java.awt.HeadlessException;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 * @authors 
 * Ana Romero
 * Jorge Zuniga
 * Noel Martinez
 */
public class Main extends javax.swing.JFrame {

    public Main() {
        initComponents();
        //this.setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jb_inicio = new javax.swing.JButton();
        jb_anterior = new javax.swing.JButton();
        jb_siguiente = new javax.swing.JButton();
        jb_final = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Salida = new javax.swing.JButton();
        jLabel_nombreArchivo = new javax.swing.JLabel();
        jLabelLlvePrincipal = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Display = new javax.swing.JTable();
        FONDO = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        NuevoFile = new javax.swing.JMenuItem();
        AbrirFile = new javax.swing.JMenuItem();
        GuardarFile = new javax.swing.JMenuItem();
        CerrarFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jb_inicio.setBackground(new java.awt.Color(102, 102, 102));
        jb_inicio.setForeground(new java.awt.Color(153, 153, 153));
        jb_inicio.setText("Inicio");
        jb_inicio.setEnabled(false);
        jb_inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_inicioActionPerformed(evt);
            }
        });
        getContentPane().add(jb_inicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 380, -1, -1));

        jb_anterior.setForeground(new java.awt.Color(153, 153, 153));
        jb_anterior.setText("Anterior");
        jb_anterior.setEnabled(false);
        jb_anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_anteriorActionPerformed(evt);
            }
        });
        getContentPane().add(jb_anterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 380, -1, -1));

        jb_siguiente.setForeground(new java.awt.Color(153, 153, 153));
        jb_siguiente.setText("Siguiente");
        jb_siguiente.setEnabled(false);
        jb_siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_siguienteActionPerformed(evt);
            }
        });
        getContentPane().add(jb_siguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 380, -1, -1));

        jb_final.setForeground(new java.awt.Color(153, 153, 153));
        jb_final.setText("Final");
        jb_final.setEnabled(false);
        jb_final.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_finalActionPerformed(evt);
            }
        });
        getContentPane().add(jb_final, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 380, -1, -1));

        jButton1.setForeground(new java.awt.Color(153, 153, 153));
        jButton1.setText("Vaciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 380, -1, -1));

        Salida.setForeground(new java.awt.Color(153, 153, 153));
        Salida.setText("Salida");
        Salida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalidaActionPerformed(evt);
            }
        });
        getContentPane().add(Salida, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 380, 73, -1));

        jLabel_nombreArchivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_nombreArchivo.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_nombreArchivo.setText("Archivo Actual:");
        getContentPane().add(jLabel_nombreArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 21, 370, 16));

        jLabelLlvePrincipal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelLlvePrincipal.setForeground(new java.awt.Color(255, 255, 255));
        jLabelLlvePrincipal.setText("Llave Primaria:");
        getContentPane().add(jLabelLlvePrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 55, 218, -1));

        jTable_Display.setModel(new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        jTable_Display.setGridColor(new java.awt.Color(153, 0, 204));
        jTable_Display.setRowSelectionAllowed(false);
        jScrollPane3.setViewportView(jTable_Display);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 94, 609, 266));

        FONDO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Principal Page.jpg"))); // NOI18N
        getContentPane().add(FONDO, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, -1, 420));

        jPanel1.setBackground(new java.awt.Color(156, 111, 73));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 420));

        jMenu1.setText("Archivos");

        NuevoFile.setText("Nuevo Archivo");
        NuevoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoFileActionPerformed(evt);
            }
        });
        jMenu1.add(NuevoFile);

        AbrirFile.setText("Abrir Archivo");
        AbrirFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirFileActionPerformed(evt);
            }
        });
        jMenu1.add(AbrirFile);

        GuardarFile.setText("Guardar Archivo");
        GuardarFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarFileActionPerformed(evt);
            }
        });
        jMenu1.add(GuardarFile);

        CerrarFile.setText("Cerrar Archivo");
        CerrarFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarFileActionPerformed(evt);
            }
        });
        jMenu1.add(CerrarFile);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Campos");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("jMenu3");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NuevoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoFileActionPerformed
        // TODO add your handling code here:
        if (archivoCargado != null) {
            CerrarFileActionPerformed(evt); // Al correr el programa y abrir el primer archivo hace una corrida de esta linea, la cual no deberia pasar
            // porque por default no hay archivo cargado
        }
        JFileChooser jfc = new JFileChooser("./Files");//instanciar
        nuevo = true;
        // y agregar una extension que filtre
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo de registro ANJ", "ANJ");
        jfc.setFileFilter(filtro);
        int seleccion = jfc.showSaveDialog(this); // muestre la ventana
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File fichero = null;

            path = jfc.getSelectedFile().getPath();

            if (!path.endsWith(".ANJ")) {
                FileOutputStream fs = null;
                try {
                    //si el filtro es archivo de texto
                    fichero = new File(path + ".ANJ");//agarre el archivo y concatene la extension
                    String indexFileName = path;
                    File archivoIndicesAux = new File(indexFileName + ".index");
                    fs = new FileOutputStream(archivoIndicesAux);
                    try (ObjectOutputStream os = new ObjectOutputStream(fs)) {
                        os.flush();
                    }
                    archivoIndices = archivoIndicesAux;
                } catch (FileNotFoundException ex) {
                } catch (IOException ex) {
                } finally {
                    try {
                        fs.close();
                    } catch (IOException ex) {
                    }
                }
            } else {

                JOptionPane.showMessageDialog(this, "El archivo ya existe.", "Error.",
                        JOptionPane.ERROR_MESSAGE);
                nuevo = false;
                return;
            }
            InsertMetadataInNewFile(fichero);
            JOptionPane.showMessageDialog(this, "Archivo creado exitosamente.");
            archivoCargado = fichero;
            archivoEnUso = new ArchivoDeRegistro(archivoCargado, archivoIndices);
            jLabel_nombreArchivo.setText("Archivo Actual: " + archivoCargado.getName());
            jTable_Display.setModel(new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            });
            saved = true;
            nuevo = false;/*
            jButton_agregar.setEnabled(true);
            jButton_modificar.setEnabled(true);
            jButton_eliminar.setEnabled(true);
            jButton_hacerPrincipal.setEnabled(true);
             */
        }
    }//GEN-LAST:event_NuevoFileActionPerformed

    private void CerrarFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarFileActionPerformed
        // TODO add your handling code here:
        if (!saved) {
            int save = JOptionPane.showConfirmDialog(this, "¿Desea guardar el "
                    + "archivo antes de cerrar?", "Guardar y cerrar.",
                    JOptionPane.YES_NO_OPTION);
            if (save == JOptionPane.YES_OPTION) {
                GuardarFileActionPerformed(evt);
            }
            saved = true;
        }
        jLabel_nombreArchivo.setText("Nombre del Archivo:");
        archivoCargado = null;
        clearDisplay(true);
        jLabelLlvePrincipal.setText("Llave principal: ");
        jb_inicio.setEnabled(false);
        jb_final.setEnabled(false);
        jb_anterior.setEnabled(false);
        jb_siguiente.setEnabled(false);
    }//GEN-LAST:event_CerrarFileActionPerformed

    private void GuardarFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarFileActionPerformed
        // TODO add your handling code here:
        if (!verifyOpen()) {
            return;
        }

        try ( RandomAccessFile raf = new RandomAccessFile(archivoCargado, "rw")) {

            if (saved) {
                return;
            }

            InsertMetadataInNewFile(archivoCargado);
            JOptionPane.showMessageDialog(this, "El archivo se ha guardado "
                    + "correctamente", "EXITO", JOptionPane.INFORMATION_MESSAGE);
            saved = true;
        } catch (IOException ex) {
        }        
    }//GEN-LAST:event_GuardarFileActionPerformed

    private void AbrirFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirFileActionPerformed
        // TODO add your handling code here:
        try {
            if (archivoCargado != null) {
                CerrarFileActionPerformed(evt); //Al correr el programa y abrir el primer archivo hace una corrida de esta linea, la cual no deberia pasar
                // porque por default no hay archivo cargado
            }
            nuevo = false;
            JFileChooser jfc = new JFileChooser("./Files"); //donde deseamos que aparezca
            //crear los filtros
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de registro ANJ", "ANJ");
            //setear los filtros
            jfc.setFileFilter(filtro);//forma 1: marcado como seleccionado
            int seleccion = jfc.showOpenDialog(this);
            if (seleccion == JFileChooser.APPROVE_OPTION && jfc.getSelectedFile().isFile()) {
                File archiAuxNoSeCual = jfc.getSelectedFile();
                String pathParaCargar = archiAuxNoSeCual.getPath();
                if (pathParaCargar.endsWith(".ANJ")) {
                    pathParaCargar = pathParaCargar.substring(0, pathParaCargar.length() - 6);
                    pathParaCargar += ".index";
                }

                File archivoIndicesACargar = new File(pathParaCargar);
                loadFile(archiAuxNoSeCual, archivoIndicesACargar);
            }
        } catch (HeadlessException e) {
        }
    }//GEN-LAST:event_AbrirFileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearDisplay(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jb_finalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_finalActionPerformed
        int target = archivoEnUso.getNoRegistros() - (archivoEnUso.getNoRegistros() % 20);

        try (RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

            int largo = archivoEnUso.longitudRegistro();
            raf.seek(currentPosList);

            while (currentRegList < target) {
                if (raf.readChar() != '*') {
                    currentRegList++;
                }
                currentPosList += largo;
                raf.seek(currentPosList);
            }

            jb_siguiente.setEnabled(false);
            jb_final.setEnabled(false);

            jb_anterior.setEnabled(true);
            jb_inicio.setEnabled(true);

            listAfter();

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jb_finalActionPerformed

    private void jb_siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_siguienteActionPerformed
        if (archivoEnUso.getNoRegistros() - 20 <= currentRegList) {
            jb_siguiente.setEnabled(false);
            jb_final.setEnabled(false);
        }

        jb_anterior.setEnabled(true);
        jb_inicio.setEnabled(true);

        listAfter();
    }//GEN-LAST:event_jb_siguienteActionPerformed

    private void jb_anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_anteriorActionPerformed

        if (currentRegList <= 40) {
            jb_anterior.setEnabled(false);
            jb_inicio.setEnabled(false);
        }

        jb_siguiente.setEnabled(true);
        jb_final.setEnabled(true);

        int target = currentRegList - (((currentRegList - 1) % 20) + 1) - 20;

        try (RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

            int largo = archivoEnUso.longitudRegistro();

            while (currentRegList > target) {

                currentPosList -= largo;
                raf.seek(currentPosList);

                if (raf.readChar() != '*') {
                    currentRegList--;
                }
            }

            listAfter();

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jb_anteriorActionPerformed

    private void jb_inicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_inicioActionPerformed

        jb_siguiente.setEnabled(true);
        jb_final.setEnabled(true);

        jb_anterior.setEnabled(false);
        jb_inicio.setEnabled(false);

        currentPosList = archivoEnUso.tamanioMetadata();
        currentRegList = 0;

        listAfter();
    }//GEN-LAST:event_jb_inicioActionPerformed

    private void SalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalidaActionPerformed
        // TODO add your handling code here:
        if (!saved) {
            int save = JOptionPane.showConfirmDialog(this, "¿Desea guardar el "
                + "archivo antes de salir?", "Guardar y cerrar.", JOptionPane.YES_NO_OPTION);
            if (save == JOptionPane.YES_OPTION) {
                //saveFileActionPerformed(evt);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_SalidaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirFile;
    private javax.swing.JMenuItem CerrarFile;
    private javax.swing.JLabel FONDO;
    private javax.swing.JMenuItem GuardarFile;
    private javax.swing.JMenuItem NuevoFile;
    private javax.swing.JButton Salida;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabelLlvePrincipal;
    private javax.swing.JLabel jLabel_nombreArchivo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_Display;
    private javax.swing.JButton jb_anterior;
    private javax.swing.JButton jb_final;
    private javax.swing.JButton jb_inicio;
    private javax.swing.JButton jb_siguiente;
    // End of variables declaration//GEN-END:variables

    private boolean verifyOpen() {
        if (archivoCargado == null) {
            JOptionPane.showMessageDialog(this, "Debe abrir un archivo para "
                    + "realizar esa operación.", "No hay un archivo abierto",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    
    
    public void InsertMetadataInNewFile(File archivo) {
        try {
            new FileWriter(archivo, false).close();
        } catch (IOException ex) {
        }

        try (RandomAccessFile raf = new RandomAccessFile(archivo, "rw")) {

            raf.writeInt(-1);//no es RRN, es cabeza del availist 
            raf.writeInt(0);//#registros    
            Date date = Calendar.getInstance().getTime();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
            String strDateCreated = dateFormat.format(date);
            raf.writeUTF(strDateCreated);//fecha de creacion
            if (nuevo) {
                raf.writeInt(-1);//llave principal -1 por defecto solo para archivos nuevos
                raf.writeInt(0);//archivos nuevos no tienen llaves secundarias
                raf.writeInt(0);//archivos nuevos no tiene campos
            } else {
                raf.writeInt(archivoEnUso.getLlavePrincipal());
                int cantidadLlavesSecundarias = archivoEnUso.getSecundarias().size();
                raf.writeInt(cantidadLlavesSecundarias);
                for (int i = 0; i < archivoEnUso.getSecundarias().size(); i++) {
                    raf.writeInt(archivoEnUso.getSecundarias().get(i));
                }
                int cantidadCampos = archivoEnUso.getCamposDelArchivo().size();
                raf.writeInt(cantidadCampos);
                for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {
                    String auxiliarNoSeCuantas = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                    raf.writeUTF(archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo());
                    if (auxiliarNoSeCuantas.endsWith("_str")) {
                        raf.writeInt(((CampoTexto) archivoEnUso.getCamposDelArchivo().get(i)).getLongitud());
                    }
                }
                raf.writeChar('\n');
            }
        } catch (IOException e) {
        }
    }

    private void loadFile(File file, File fileIndices) {
        if (file == null) {
            return;
        }
        archivoCargado = file;
        archivoIndices = fileIndices;
        archivoEnUso = new ArchivoDeRegistro(archivoCargado, archivoIndices);

        jLabel_nombreArchivo.setText("Current file: " + archivoCargado.getName());
        jTable_Display.setModel(new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        DefaultListModel list_model = new DefaultListModel();
        DefaultTableModel model = (DefaultTableModel) jTable_Display.getModel();

        try (RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {
            for (int i = 0; i < archivoEnUso.getCamposDelArchivo().size(); i++) {//Para cargar los registros en memoria una vez se abre el archivo
                String aux = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                aux = aux.substring(0, 25).strip();

                list_model.addElement(aux);

                String valoresColumna[] = new String[20];

                model.addColumn(aux, valoresColumna);
            }

            if (archivoEnUso.getLlavePrincipal() == -1) {
                jLabelLlvePrincipal.setText("Llave Principal: No se ha seleccionado una llave principal");
            } else {
                String llavePrincipal = archivoEnUso.getCamposDelArchivo().get(archivoEnUso.getLlavePrincipal()).getNombreCampo().substring(0, 25).strip();
                jLabelLlvePrincipal.setText("Llave Principal: " + llavePrincipal);
            }

            if (archivoEnUso.getLlavePrincipal() != -1) {
                tieneLlavePrincipal = true;
            }
            /*
            if (archivoEnUso.getNoRegistros() == 0) {
                jButton_agregar.setEnabled(true);
                jButton_modificar.setEnabled(true);
                jButton_eliminar.setEnabled(true);
                jButton_hacerPrincipal.setEnabled(true);
            } else {
                jButton_agregar.setEnabled(false);
                jButton_modificar.setEnabled(false);
                jButton_eliminar.setEnabled(false);
                jButton_hacerPrincipal.setEnabled(false);
            }
             */
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }

    public void clearDisplay(boolean newTableModel) {
        //Reset progressbar
        //jpb_porcentaje.setValue(0);

        //Reset table
        if (newTableModel) {
            jTable_Display.setModel(new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            });
        } else {
            String[][] data = new String[20][archivoEnUso.getCamposDelArchivo().size()];
            DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();

            String[] columns = new String[data[0].length];
            for (int i = 0; i < columns.length; i++) {
                columns[i] = m.getColumnName(i);
            }

            m.setDataVector(data, columns);
        }

        //Reset navigation buttons
        jb_siguiente.setEnabled(false);
        jb_final.setEnabled(false);

        jb_anterior.setEnabled(false);
        jb_inicio.setEnabled(false);

        //Reset helper variables
        currentPosList = -1;
        currentRegList = -1;

    }

    private void listAfter() {
        DefaultTableModel m = (DefaultTableModel) jTable_Display.getModel();

        String[][] data = new String[20][archivoEnUso.getCamposDelArchivo().size()];

        try (RandomAccessFile raf = new RandomAccessFile(archivoCargado, "r")) {

            byte[] types = new byte[data[0].length];

            for (int i = 0; i < types.length; i++) {
                String nom = archivoEnUso.getCamposDelArchivo().get(i).getNombreCampo();
                if (nom.endsWith("int")) {
                    types[i] = 1;
                } else if (nom.endsWith("dec")) {
                    types[i] = 2;
                } else if (nom.endsWith("car")) {
                    types[i] = 3;
                } else {
                    types[i] = 4;
                }
            }

            int largo = archivoEnUso.longitudRegistro();
            raf.seek(currentPosList);

            int row = 0;
            for (; currentRegList < archivoEnUso.getNoRegistros() && row < 20; currentRegList++) {

                char mark = raf.readChar();
                if (mark == '*') {
                    currentRegList--;
                    currentPosList += largo;
                    raf.seek(currentPosList);
                    continue;
                }

                for (int j = 0; j < data[0].length; j++) {

                    switch (types[j]) {
                        case 1: {
                            String val = String.valueOf(raf.readInt());
                            data[row][j] = val;
                            break;
                        }
                        case 2: {
                            String val = String.valueOf(raf.readDouble());
                            data[row][j] = val;
                            break;
                        }
                        case 3: {
                            String val = String.valueOf(raf.readChar());
                            data[row][j] = val;
                            break;
                        }
                        case 4: {
                            String val = raf.readUTF();
                            data[row][j] = val;
                            break;
                        }
                    }
                }
                currentPosList += largo;
                row++;
                raf.readChar();
            }

        } catch (EOFException eof) {
        } catch (Exception e) {
            return;
        }

        String[] columns = new String[data[0].length];
        for (int i = 0; i < columns.length; i++) {
            columns[i] = m.getColumnName(i);
        }

        m.setDataVector(data, columns);
        //jpb_porcentaje.setValue(currentRegList);
    }

    private boolean saved = true;
    private File archivoCargado;
    private File archivoIndices;
    private boolean nuevo = false;
    private String path = "";
    private ArchivoDeRegistro archivoEnUso;
    private boolean tieneLlavePrincipal = false;
    private int currentPosList = -1;
    private int currentRegList = -1;
}
